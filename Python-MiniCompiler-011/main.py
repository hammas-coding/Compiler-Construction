from lexer import Lexer
from parser import Parser
from code_generator import CodeGenerator
from virtual_machine import VirtualMachine

def read_input_code():
    print("Enter your code (end with an empty line):")
    lines = []
    while True:
        line = input()
        if line.strip() == "":
            break
        lines.append(line)
    return "\n".join(lines)

def main():
    # Step 1: Read input code from the user
    input_code = read_input_code()
    print(f"Input Code:\n{input_code}")

    # Step 2: Tokenize the code
    lexer = Lexer(input_code)
    tokens = lexer.tokenize()
    print(f"Tokens: {tokens}")

    # Step 3: Parse the tokens to generate an AST
    parser = Parser(tokens)
    ast = parser.parse()
    print(f"AST: {ast}")

    # Step 4: Generate bytecode from the AST
    code_generator = CodeGenerator(ast)
    bytecode = code_generator.generate()
    print(f"Generated Bytecode:\n{bytecode}")

    # Step 5: Execute the bytecode using the virtual machine
    vm = VirtualMachine(bytecode.split('\n'))
    vm.run()
    print("Execution Result:")
    print(vm.variables)

if __name__ == "__main__":
    main()
